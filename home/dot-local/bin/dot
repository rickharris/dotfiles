#!/usr/bin/env bash
set -e

dotfiles=$HOME/src/github.com/rickharris/dotfiles
# Try to load homebrew in case it has been installed already but the script
# failed and needs to be re-run. This keeps us from re-installing homebrew.
eval "$(/opt/homebrew/bin/brew shellenv)"

install() {
  # Install hombrew first, which will download also download Command Line Tools
  # for Xcode.
  if test ! "$(which brew)"; then
    echo -e "\nInstalling Homebrew…"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    if [[ ! -f $HOME/.zprofile ]]; then
      touch "$HOME"/.zprofile
    fi
    # We don't want shellenv to be run
    # shellcheck disable=SC2016
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>"$HOME"/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
    brew completions link
  fi

  if [[ ! -f $HOME/.ssh/id_ed25519 ]]; then
    echo -e "\nCreating an ssh key…"
    ssh-keygen -t ed25519
    ssh-add --apple-use-keychain "$HOME"/.ssh/id_ed25519
  fi

  if test ! "$(which gh)"; then
    brew install gh
  fi

  if ! gh auth status --hostname github.com >/dev/null; then
    gh auth login --git-protocol=ssh --hostname=github.com --web
  fi

  if [ ! -d "$dotfiles" ]; then
    gh repo clone rickharris/dotfiles "$dotfiles"
  fi

  if ! brew bundle check --no-upgrade --file="$dotfiles"/Brewfile >/dev/null; then
    brew bundle --no-upgrade --file="$dotfiles"/Brewfile

    # Fix permissions issue with homebrew and zsh-completions
    # https://formulae.brew.sh/formula/zsh-completions
    permissions=$(stat -f "%SMp %SLp" "$HOMEBREW_PREFIX"/share)
    if [[ $permissions =~ 'w' ]]; then
      chmod go-w "$HOMEBREW_PREFIX"/share
    fi
  fi

  # On first install, open up Karabiner-Elements so that it can set itself up
  # and ask for the permissions that it need. After that some form of karabiner
  # should be running and this step can be skipped.
  if ! pgrep karabiner | grep -v grep >/dev/null; then
    open /Applications/Karabiner-Elements.app
  fi

  if ! asdf plugin list | grep deno >/dev/null; then
    asdf plugin add deno https://github.com/asdf-community/asdf-deno.git
  fi

  if ! asdf plugin list | grep nodejs >/dev/null; then
    asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git >/dev/null
  fi

  if ! asdf plugin list | grep neovim >/dev/null; then
    asdf plugin add neovim >/dev/null
  fi
}

link() {
  stow --dir "$dotfiles" --target="$HOME" --restow --dotfiles home
  defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
  defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$dotfiles/iterm2"

}

preferences() {
  # Enable Safari Developer Menu
  # Used as a check for full disk access
  if ! defaults write com.apple.Safari IncludeDevelopMenu -bool true; then
    cat <<-EOF
Before running this script, enable Full Disk Access for your terminal.

https://support.apple.com/guide/mac-help/change-privacy-security-settings-on-mac-mchl211c911f/mac
EOF
    exit 1
  fi

  # Many things taken from https://mths.be/macos

  # Close any open System Preferences panes, to prevent them from overriding
  # settings we’re about to change
  osascript -e 'tell application "System Preferences" to quit'

  # Trackpad: enable tap to click for this user and for the login screen
  defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Mouse: Increase tracking speed
  defaults write NSGlobalDomain com.apple.mouse.scaling -float "2"

  # Fast key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  # Hide Dock
  defaults write com.apple.dock autohide -bool true

  # No recents in Dock
  defaults write com.apple.dock show-recents -bool false

  # Finder defaults to column view
  defaults write com.apple.finder "FXPreferredViewStyle" -string "clmv" && killall Finder

  # New Finder windows open home folder
  defaults write com.apple.finder NewWindowTarget -string "PfHm"

  # Ask for location only once per website
  # 0 = deny everything
  # 1 = ask once per day
  # 2 = ask once
  defaults write com.apple.Safari SafariGeolocationPermissionPolicy -int 2

  # Privacy: don’t send search queries to Apple
  defaults write com.apple.Safari UniversalSearchEnabled -bool false
  defaults write com.apple.Safari SuppressSearchSuggestions -bool true

  # Press Tab to highlight each item on a web page
  defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

  # Disable AutoFill
  # defaults write com.apple.Safari AutoFillFromAddressBook -bool false
  defaults write com.apple.Safari AutoFillPasswords -bool false
  defaults write com.apple.Safari AutoFillCreditCardData -bool false
  defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false

  # Show status bar
  defaults write com.apple.Safari ShowStatusBar -bool true
  defaults write com.apple.Safari ShowOverlayStatusBar -bool true
  defaults write com.apple.Safari ShowStatusBarInFullScreen -bool true

  # Configure DuckDuckGo as main search engine
  defaults write com.apple.Safari SearchProviderIdentifier -string "com.duckduckgo"
  defaults write NSGlobalDomain NSProviderIdentifier -string "com.duckduckgo"
}

if [ $# -eq 0 ]; then
  install
  link
  preferences
  exit
fi

print_help() {
  printf "%s\n\n" "Run scripts related to your dotfiles repo."
  printf "%s\t%s\n" "dot        " "Run all scripts in the proper order"
  printf "%s\t%s\n" "dot install" "Install dependencies"
  printf "%s\t%s\n" "dot link   " "Link dotfiles the correct location"
  printf "%s\t%s\n" "dot prefs  " "Set system and app preferences"
}

case $1 in
install)
  install
  ;;
link)
  link
  ;;
prefs)
  preferences
  ;;
*)
  print_help
  ;;
esac
